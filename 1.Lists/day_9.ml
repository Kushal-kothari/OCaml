(* 10/02/2015 *)

#use "day_8.ml"

(************************************************************************************)
(* 20. Remove the K'th element from a list. (easy) *)
(************************************************************************************)

let rec remove_at n l = match n, l with 
  | _, [] -> [] 
  | 0, h::t -> t
  | x, h::t -> h::(remove_at (x-1) t)

(*==================================================================================*)
(* SOLUTION *)
(*==================================================================================*)

let rec remove_at_sol n = function
  | [] -> []
  | h :: t -> if n = 0 then t else h :: remove_at (n-1) t;;
(* val remove_at : int -> 'a list -> 'a list = <fun> *)

(*==================================================================================*)
(* NOTES *)
(*==================================================================================*)

(* Try to simplify your code *)

(*==================================================================================*)
(* REVISION *)
(*==================================================================================*)

(* NONE *)
    
(*+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-*)
(*+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-*)

(************************************************************************************)
(* 21. Insert an element at a given position into a list. (easy) *)
(************************************************************************************)

let rec insert_at ele n = function
  | [] -> [ele]
  | h::t -> if n = 0 then ele::h::t else h::(insert_at ele (n-1) t)

(*==================================================================================*)
(* SOLUTION *)
(*==================================================================================*)

let rec insert_at_sol x n = function
    | [] -> [x]
    | h :: t as l -> if n = 0 then x :: l else h :: insert_at x (n-1) t;;
(* val insert_at : 'a -> int -> 'a list -> 'a list = <fun> *)

(*==================================================================================*)
(* NOTES *)
(*==================================================================================*)

(* Good Job! *)

(*==================================================================================*)
(* REVISION *)
(*==================================================================================*)

(* NONE *)
    
(*+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-*)
(*+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-*)

(************************************************************************************)
(* 21. Create a list containing all integers within a given range. (easy) *)
(************************************************************************************)

let rec range hd tl= 
  if hd = tl then [hd] 
  else if hd < tl then hd::(range (hd+1) tl)
  else hd::(range hd (tl-1))

(*==================================================================================*)
(* SOLUTION *)
(*==================================================================================*)

let range_sol a b =
    let rec aux a b =
      if a > b then [] else a :: aux (a+1) b  in
    if a > b then List.rev (aux b a) else aux a b;;
(* val range : int -> int -> int list = <fun> *)

(*==================================================================================*)
(* NOTES *)
(*==================================================================================*)

(* Tail Rsecursion! *)

(*==================================================================================*)
(* REVISION *)
(*==================================================================================*)

(* NONE *)


