(* 02/02/2015 *)

(************************************************************************************)
(* 1. Write a function last : 'a list -> 'a option that returns the 
	last element of a list. (easy) *)
(************************************************************************************)

exception EmptyList

let rec last l = match l with
	| [] -> raise EmptyList 
	| [x] -> x
	| h::t -> last t

(*==================================================================================*)
(* SOLUTION *)
(*==================================================================================*)

let rec last_sol = function
	| [] -> None
	| [x] -> Some x
	| _ :: t -> last_sol t 

(*==================================================================================*)
(* Notes *)
(*==================================================================================*)

(* be aware of returned type, function does same thing but type is wrong *)
(* Key point: Option type: Options are widely used in Ocaml to represent undefined values 
	(a little like NULL in C, but in a type and memory safe way). *)

(*+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-*)
(*+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-*)

(*==================================================================================*)
(* REVISION *)
(*==================================================================================*)

(* NONE *)

(************************************************************************************)
(* 2. Find the last but one (last and penultimate) elements of a list. (easy) *)
(************************************************************************************)
let rec last_two l = match l with
	| [] -> None
	| [x] -> None
	| [x;y] -> Some (x, y)
	| _::t -> last_two t

(*==================================================================================*)
(* SOLUTION *)
(*==================================================================================*)

let rec last_two_sol = function
	| [] | [_] -> None
	| [x;y] -> Some (x,y)
	| _::t -> last_two_sol t
(* val last_two : 'a list -> ('a * 'a) option = <fun> *)

(*==================================================================================*)
(* Notes *)
(*==================================================================================*)

(* Simplify your function, Ockham's Razor! *)

(*==================================================================================*)
(* REVISION *)
(*==================================================================================*)

(* NONE *)







