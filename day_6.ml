(* 07/02/2020 *)

#use "day_5.ml"

(************************************************************************************)
(* 14. Duplicate the elements of a list. (easy) *)
(************************************************************************************)

let rec duplicate = function

  | [] -> []
	| h::t -> [h;h]@(duplicate t)

(*==================================================================================*)
(* SOLUTION *)
(*==================================================================================*)

let rec duplicate_sol = function
		| [] -> []
		| h :: t -> h :: h :: duplicate t;;
(* val duplicate : 'a list -> 'a list = <fun> *)

(*==================================================================================*)
(* NOTES *)
(*==================================================================================*)

(* Good job! *)

(*==================================================================================*)
(* REVISION *)
(*==================================================================================*)

(* NONE *)
		
(*+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-*)
(*+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-*)

(************************************************************************************)
(* 15. Replicate the elements of a list a given number of times. (medium) *)
(************************************************************************************)
let rec copy element = function
  | 0 -> []
  | larger -> element :: (copy element (larger-1))

let rec replicate l n = match l, n with  
  | [], _ ->  []
  | _ , 0 -> l
  | h::t, _ -> (copy h n)@(replicate t n)

(*==================================================================================*)
(* SOLUTION *)
(*==================================================================================*)

let replicate_sol list n =
    let rec prepend n acc x =
      if n = 0 then acc else prepend (n-1) (x :: acc) x in
    let rec aux acc = function
      | [] -> acc
      | h :: t -> aux (prepend n acc h) t  in
    (* This could also be written as:
       List.fold_left (prepend n) [] (List.rev list) *)
    aux [] (List.rev list);;
(* val replicate : 'a list -> int -> 'a list = <fun> *)

(*==================================================================================*)
(* NOTES *)
(*==================================================================================*)

(* 1. Same idea as solution but soultion is using tail-recurison *)
(* 2. You should really practice tail recurison *)

(*==================================================================================*)
(* REVISION *)
(*==================================================================================*)

(* NONE *)
